#!/bin/bash

# This script will ... manipulate ack media.

# 20150628, joseph.tingiris@gmail.com
# 20190620, joseph.tingiris@gmail.com (significant updates)

# begin Ack.bash.include

Ack_Bash="Ack.bash"
Ack_Bash_Dirs=()
Ack_Bash_Dirs+=($(dirname $(readlink -e ${BASH_SOURCE})))
for Ack_Bash_Dir in ${Ack_Bash_Dirs[@]}; do
    while [ "${Ack_Bash_Dir}" != "" ] && [ "${Ack_Bash_Dir}" != "/" ]; do # search backwards
        Ack_Bash_Source_Dirs=()
        Ack_Bash_Source_Dirs+=("${Ack_Bash_Dir}")
        Ack_Bash_Source_Dirs+=("${Ack_Bash_Dir}/include")
        for Ack_Bash_Source_Dir in ${Ack_Bash_Source_Dirs[@]}; do
            Ack_Bash_Source=${Ack_Bash_Source_Dir}/${Ack_Bash}
            if [ -r "${Ack_Bash_Source}" ]; then
                source "${Ack_Bash_Source}"
                break
            else
                unset Ack_Bash_Source
            fi
        done
        if [ "${Ack_Bash_Source}" != "" ]; then break; fi
        Ack_Bash_Dir=$(dirname "${Ack_Bash_Dir}") # search backwards
    done
done
if [ "${Ack_Bash_Source}" == "" ]; then echo "${Ack_Bash} file not found"; exit 1; fi
unset Ack_Bash_Dir Ack_Bash

# end Ack.bash.include

ackStart

# GLOBAL_VARIABLES

Default_Date=$(date +%Y%m%d)
Default_Monthstamp=$(date +%g%m)

Default_Domain="${Ack_Install_Domain}"

Default_Install_Server="ack.${Default_Domain}"

Default_Media_Dir=${Ack_Media_Dir}
Default_Build_Dir=${Ack_Build_Dir}
Default_Distribution_Dir=${Ack_Distribution_Dir}
Default_Release_Dir=${Ack_Release_Dir}
Default_VM_Dir=${Ack_VM_Dir}

declare -i Build_Flag=1
declare -i Domain_Flag=1
declare -i Extract_Flag=1
declare -i Force_Flag=1
declare -i Install_Server_Flag=1
declare -i Mount_Flag=1
declare -i Remount_Flag=1
declare -i Unmount_Flag=1
declare -i URI_Flag=1
declare -i Virt_Flag=1
declare -i Yes_Flag=1

# Function_Names

function ackMediaBuild() {
    debugFunction $@

    # begin function logic

    local debug_level=7

    local build_arg="$1"
    debugValue build_arg ${debug_level}

    local parameter_arg="$2"
    debugValue parameter_arg ${debug_level}

    if [ ${#build_arg} -eq 0 ]; then
        aborting "${FUNCNAME} requires an argument" 3
    fi

    local build_media

    if [ ! -r "${build_arg}" ] || [ -d "${build_arg}" ]; then
        if [ -r "${Media_Dir}/${build_arg}" ] && [ ! -d "${Media_Dir}/${build_arg}" ]; then
            build_media="${Media_Dir}/${build_arg}"
        else
            if [ -r "${Build_Dir}/${build_arg}" ] && [ ! -d "${Build_Dir}/${build_arg}" ]; then
                build_media="${Build_Dir}/${build_arg}"
            else
                if [ -r "${Distribution_Dir}/${build_arg}" ] && [ ! -d "${Distribution_Dir}/${build_arg}" ]; then
                    build_media="${Distribution_Dir}/${build_arg}"
                else
                    if [ -r "${Release_Dir}/${build_arg}" ] && [ ! -d "${Release_Dir}/${build_arg}" ]; then
                        build_media="${Release_Dir}/${build_arg}"
                    else
                        if [ -r "${VM_Dir}/${build_arg}" ] && [ ! -d "${VM_Dir}/${build_arg}" ]; then
                            build_media="${VM_Dir}/${build_arg}"
                        else
                            build_media=""
                        fi
                    fi
                fi
            fi
        fi
    else
        build_media=${build_arg}
    fi

    if [ ${#build_media} -eq 0 ]; then
        aborting "build_media empty"
    fi

    if [ ! -r "${build_media}" ]; then
        aborting "build_media '${build_arg}' file not readable"
    fi

    local genisoimage=$(type -P genisoimage)
    if [ ${#genisoimage} -eq 0 ] || [ ! -x "${genisoimage}" ]; then
        aborting "genisoimage executable not found" 3
    fi
    debugValue genisoimage ${debug_level}

    local implantisomd5=$(type -P implantisomd5)
    if [ ${#implantisomd5} -eq 0 ] || [ ! -x "${implantisomd5}" ]; then
        aborting "implantisomd5 executable not found" 3
    fi
    debugValue implantisomd5 ${debug_level}

    local isohybrid=$(type -P isohybrid)
    if [ ${#isohybrid} -eq 0 ] || [ ! -x "${isohybrid}" ]; then
        aborting "isohybrid executable not found" 3
    fi
    debugValue isohybrid ${debug_level}

    local isoinfo=$(type -P isoinfo)
    if [ ${#isoinfo} -eq 0 ] || [ ! -x "${isoinfo}" ]; then
        aborting "isoinfo executable not found" 3
    fi
    debugValue isoinfo ${debug_level}

    local md5sum=$(type -P md5sum)
    if [ ${#md5sum} -eq 0 ] || [ ! -x "${md5sum}" ]; then
        aborting "md5sum executable not found" 3
    fi
    debugValue md5sum ${debug_level}

    local rsync=$(type -P rsync)
    if [ ${#rsync} -eq 0 ] || [ ! -x "${rsync}" ]; then
        aborting "rsync executable not found" 3
    fi
    debugValue rsync ${debug_level}

    ${isoinfo} -i "${build_media}" 2> /dev/null
    if [ $? -ne 0 ]; then
        aborting "'${build_media}' file is not an ISO" 3
    fi
    debugValue build_media ${debug_level}

    local build_media_basename=$(basename ${build_media})
    debugValue build_media_basename ${debug_level}

    local build_media_dirname=$(dirname ${build_media})
    local build_media_dirname=$(dirname $(realpath ${build_media}))
    debugValue build_media_dirname ${debug_level}

    local build_media_uri=$(ackURI "${build_media}" iso)
    build_media_uri=${build_media_uri//\/\//\/}

    if [ "${build_media_uri}" == "/" ] || [ "${build_media_uri}" == "" ]; then
        aborting "build_media_uri is empty"
    fi
    debugValue build_media_uri ${debug_level}

    local build_media_dir=${build_media_dirname}/${build_media_uri}
    build_media_dir=${build_media_dir//\/\//\/}

    if [ "${build_media_dir}" == "/" ] || [ "${build_media_dir}" == "" ]; then
        aborting "build_media_dir '${build_media_dir}' is empty"
    fi

    if [ -a "${build_media_dir}" ] && [ ! -d "${build_media_dir}" ]; then
        aborting "build_media_dir '${build_media_dir}' exists but is not a directory"
    fi

    debugValue build_media_dir ${debug_level}

    local build_media_install_uri=$(echo ${Ack_Distribution_Dir} | sed -e "s!${Ack_Dir}!!g")
    build_media_install_uri+=${build_media_uri}

    build_media_install_uri="${build_media_install_uri%"${build_media_install_uri##*[!/]}"}" # trim trailing slashes

    if [ "${build_media_install_uri}" == "/" ] || [ "${build_media_install_uri}" == "" ]; then
        aborting "build_media_install_uri is empty"
    fi
    debugValue build_media_install_uri ${debug_level}

    local build_distribution=$(echo "${build_media_uri}" | awk -F/ '{print $2}')
    if [ "${build_distribution}" == "" ]; then
        build_distribution="build_distribution"
    fi
    debugValue build_distribution ${debug_level}

    local build_version=$(echo "${build_media_uri}" | awk -F/ '{print $3}')
    if [ "${build_version}" == "" ]; then
        build_version="build_version"
    fi
    debugValue build_version ${debug_level}

    local build_architecture=$(echo "${build_media_uri}" | awk -F/ '{print $(NF-1)}')
    if [ "${build_architecture}" == "" ]; then
        build_architecture="build_architecture"
    fi
    debugValue build_architecture ${debug_level}

    local build_subrelease=$(echo "${build_media_uri}" | awk -F/ '{print $(NF-2)}')
    if [ "${build_subrelease}" == "${build_version}" ] || [ "${build_subrelease}" == "${build_architecture}" ]; then
        build_subrelease=""
    fi
    debugValue build_subrelease ${debug_level}

    # what's better? what's best?

    local build_name

    #build_name=${build_distribution}-${build_version}-${build_architecture}-${Install_Server}
    #build_name=${Install_Server}-${build_distribution}-${build_version}-${build_architecture}-${Default_Monthstamp}

    build_name=${build_distribution}
    build_name+=-${build_version}
    build_name+=-${build_architecture}
    if [ ${#build_subrelease} -gt 0 ]; then
        build_name+=-${build_subrelease}
    fi
    build_name+=-${Default_Monthstamp}
    build_name+=-${Install_Server}

    build_name=${build_name//--/-}
    debugValue build_name ${debug_level}

    build_name_short=${build_distribution}
    build_name_short+=-${build_version}
    build_name_short+=-${Default_Monthstamp}
    build_name_short+=-$(echo "${Install_Server}" | awk -F\. '{print $1}')
    debugValue build_name_short ${debug_level}

    local build_name_uri=$(ackURI "${build_name}") # not an iso (yet)
    build_name_uri=${build_name_uri//\/\//\/}
    debugValue build_name_uri ${debug_level}

    local build_dir=${Build_Dir}/${build_name}/
    build_dir=${build_dir//\/\//\/}

    if [ "${build_dir}" == "/" ] || [ "${build_dir}" == "" ]; then
        aborting "build_dir '${build_dir}' is empty"
    fi

    if [ -a "${build_dir}" ] && [ ! -d "${build_dir}" ]; then
        aborting "build_dir '${build_dir}' exists but is not a directory"
    fi

    if [ ! -d "${build_dir}" ]; then
        mkdir -p "${build_dir}" &> /dev/null
        if [ $? -ne 0 ]; then
            aborting "'mkdir -p ${build_dir}' failed"
        fi
    fi

    debugValue build_dir ${debug_level}

    local build_dir_uri=$(echo ${build_dir} | sed -e "s!${Ack_Dir}!!g")
    build_dir_uri="${build_dir_uri%"${build_dir_uri##*[!/]}"}" # trim trailing slashes
    debugValue build_dir_uri ${debug_level}

    local build_include_dir=${Build_Dir}/include/${build_media_uri}/
    build_include_dir=${build_include_dir//\/\//\/}
    if [ ! -d "${build_include_dir}" ]; then
        mkdir -p "${build_include_dir}" &> /dev/null
        if [ $? -ne 0 ]; then
            aborting "'mkdir -p ${build_include_dir}' failed"
        fi
    fi

    debugValue build_include_dir ${debug_level}

    local build_isolinux=0
    local build_uefi=0

    local build_require

    local build_requires=()
    build_requires+=("EFI")
    build_requires+=("images")
    build_requires+=("isolinux")

    for build_require in ${build_requires[@]}; do

        # verify the build_media has the required directory

        if [ -d ${build_media_dir}/${build_require} ]; then

            debugValue build_require ${debug_level} "directory found"

            local rsync_args="-a ${build_media_dir}/${build_require}/ ${build_dir}/${build_require}/"
            rsync_args=${rsync_args//\/\//\/}
            debug "rsync ${rsync_args}" ${debug_level}

            ${rsync} ${rsync_args}
            if [ $? -ne 0 ]; then
                aborting "'${rsync} ${rsync_args}' failed"
            fi

            unset rsync_args

        else

            debugValue build_require ${debug_level} "directory not found"

            if [ "${build_require}" == "EFI" ]; then
                # disable build for EFI (uefi)
                build_uefi=1
            else
                # disable build for isolinux (bios)
                build_isolinux=1
            fi

        fi

    done


    # some more checks ...


    debugValue build_uefi ${debug_level}
    debugValue build_isolinux ${debug_level}

    if [ ${build_uefi} -eq 0 ]; then

        if [ ! -f "${build_dir}/images/efiboot.img" ]; then
            aborting "'${build_dir}/images/efiboot.img' file not found"
        fi

    fi

    if [ ${build_isolinux} -eq 0 ]; then

        if [ ! -f "${build_dir}/isolinux/boot.cat" ]; then
            aborting "'${build_dir}/isolinux/boot.cat' file not found"
        fi

        if [ ! -f "${build_dir}/isolinux/isolinux.bin" ]; then
            aborting "'${build_dir}/isolinux/isolinux.bin' file not found"
        fi

    fi

    # remove bloat; TODO make this better

    if [ -f "${build_dir}/images/boot.iso" ]; then
        rm "${build_dir}/images/boot.iso" &> /dev/null # e.g., this is bloat on 'everything' cds
        if [ $? -ne 0 ]; then
            aborting "'rm ${build_dir}/images/boot.iso' failed"
        fi
    fi


    # add additional build items

    if [ ! -a ${build_dir}/${Ack_Label} ] && [ ! -d ${build_dir}/${Ack_Label} ]; then
        mkdir -p "${build_dir}/${Ack_Label}" &> /dev/null
        if [ $? -ne 0 ]; then
            aborting "'mkdir -p ${build_dir}/${Ack_Label}' failed"
        fi
    fi

    # TODO: maybe not the most ideal directoy ...
    # rsync 'manual' include files into the build dir
    if [ -d "${build_dir}" ] && [ -d "${build_include_dir}" ]; then
        local rsync_args="-a ${build_include_dir}/ ${build_dir}/"
        rsync_args=${rsync_args//\/\//\/}
        debug "rsync ${rsync_args}" ${debug_level}

        ${rsync} ${rsync_args}
        if [ $? -ne 0 ]; then
            aborting "'${rsync} ${rsync_args}' failed"
        fi

        unset rsync_args

        ls -l "${build_dir}"
    fi

    local ack_etc_dir
    local build_menu
    local build_menus=()
    local build_menu_uefi=1
    local build_menu_isolinux=1
    for ack_etc_dir in ${Ack_ETC_Dirs[@]}; do

        debugValue ack_etc_dir ${debug_level}

        if [ ${build_uefi} -eq 0 ] && [ ${build_menu_uefi} -eq 1 ]; then

            if [ -s "${ack_etc_dir}/ack-template-menu-grub-${build_name}" ]; then
                build_menus+=("${ack_etc_dir}/ack-template-menu-grub-${build_name}++++EFI/BOOT/grub.cfg")
                build_menu_uefi=0
            else
                if [ -s "${ack_etc_dir}/ack-template-menu-grub" ]; then
                    build_menus+=("${ack_etc_dir}/ack-template-menu-grub++++EFI/BOOT/grub.cfg")
                    build_menu_uefi=0
                fi
            fi

        fi

        debugValue build_uefi ${debug_level}
        debugValue build_menu_uefi ${debug_level}

        if [ ${build_isolinux} -eq 0 ] && [ ${build_menu_isolinux} -eq 1 ]; then

            if [ -s "${ack_etc_dir}/ack-template-menu-isolinux-${build_name}" ]; then
                build_menus+=("${ack_etc_dir}/ack-template-menu-isolinux-${build_name}++++isolinux/isolinux.cfg")
                build_menu_isolinux=0
            else
                if [ -s "${ack_etc_dir}/ack-template-menu-isolinux" ]; then
                    build_menus+=("${ack_etc_dir}/ack-template-menu-isolinux++++isolinux/isolinux.cfg")
                    build_menu_isolinux=0
                fi
            fi
        fi

        debugValue build_isolinux ${debug_level}
        debugValue build_menu_isolinux ${debug_level}

    done

    if [ "${build_menus}" == "" ]; then
        aborting "build_menus not found (is ISO mounted or extracted to '${build_media_dir}'?)"
    fi

    if [ ${build_uefi} -eq 0 ] && [ ${build_menu_uefi} -eq 1 ]; then
        aborting "ack-template-menu for efi not found"
    fi

    if [ ${build_isolinux} -eq 0 ] && [ ${build_menu_isolinux} -eq 1 ]; then
        aborting "ack-template-menu for isolinux not found"
    fi

    local release_iso_rev=${Default_Monthstamp}
    debugValue release_iso_rev ${debug_level}

    if [ "${parameter_arg}" == "" ]; then
        local release_iso_basename=${build_name}.iso
    else
        local release_iso_basename=${build_name}-${parameter_arg}.iso
    fi
    debugValue release_iso_basename ${debug_level}

    if [ "${parameter_arg}" == "" ]; then
        local release_iso_shortname=${build_name_short}.iso
    else
        local release_iso_shortname=${build_name_short}-${parameter_arg}.iso
    fi
    debugValue release_iso_shortname ${debug_level}

    local release_iso_dirname="${Release_Dir}"
    debugValue release_iso_dirname ${debug_level}

    local release_iso="${release_iso_dirname}/${release_iso_basename}"
    debugValue release_iso ${debug_level}

    local release_iso_short="${release_iso_dirname}/${release_iso_shortname}"
    debugValue release_iso_short ${debug_level}

    local build_action="doing noth"

    # don't overwrite an existing release, unless forced ...
    if [ -f "${release_iso}" ]; then

        if [ ! -e "${release_iso_short}" ]; then
            ln -s "${release_iso}" "${release_iso_short}"
        fi

        if [ ${Force_Flag} -ne 0 ]; then
            aborting "'${release_iso}' exists (use --force)"
        else
            build_action="rebuild"
        fi

        if [ ! -w "${release_iso}" ]; then
            aborting "'${release_iso}' exists but is not writable"
        fi
    else
        build_action="build"
    fi

    printf "[%s] %sing iso from '%s' ...\n\n" "${build_name}" "${build_action}" "${build_media_basename}"
    printf "[%s] install server '%s' in domain '%s' ...\n\n" "${build_name}" "${Install_Server}" "${Domain}"

    local build_menu_template build_menu_destination

    for build_menu in ${build_menus[@]}; do
        debugValue build_menu ${debug_level}

        build_menu_template=${build_menu%%++++*}
        build_menu_destination=${build_dir}/${build_menu##*++++}
        build_menu_destination=${build_menu_destination//\/\//\/}

        debugValue build_menu_template ${debug_level}
        debugValue build_menu_destination ${debug_level}

        if [ -r "${build_menu_template}" ]; then

            printf "[%s] %sing menu '%s' from template '%s' ...\n\n" "${build_name}" "${build_action}" "$(basename ${build_menu_destination})" "$(basename ${build_menu_template})"

            echo "##" > ${build_menu_destination}
            echo "## DO NOT EDIT!  This file was automatically generated by $(basename $0)." >> ${build_menu_destination}
            echo "##" >> ${build_menu_destination}
            echo >> ${build_menu_destination}

            if [ "${parameter_arg}" != "" ]; then
                parameter_arg="\&${parameter_arg}"
            fi

            sed \
                -e "s!##ACK_BUILD_DISTRIBUTION##!${build_distribution}!g"\
                -e "s!##ACK_BUILD_ISO##!${build_name}-${release_iso_rev}!g"\
                -e "s!##ACK_BUILD_NAME##!${build_name}!g"\
                -e "s!##ACK_BUILD_URI##!${build_dir_uri}!g"\
                -e "s!##ACK_BUILD_VERSION##!${build_version}!g"\
                -e "s!##ACK_ENTITY##!${Ack_Entity}!g" \
                -e "s!##ACK_CLIENT_BUILD_URI##!${build_dir_uri}!g"\
                -e "s!##ACK_CLIENT_CONSOLE##!${Ack_Client_Console}!g" \
                -e "s!##ACK_CLIENT_INSTALL_URL##!${Client_Install_URL}!g" \
                -e "s!##ACK_CLIENT_INSTALL_URI##!${build_media_install_uri}!g" \
                -e "s!##ACK_INSTALL_SERVER##!${Install_Server}!g" \
                -e "s!##ACK_INSTALL_URI##!${build_media_install_uri}!g" \
                -e "s!##ACK_ISO_DATE##!${Default_Date}!g"\
                -e "s!##ACK_ISO_REV##!${release_iso_rev}!g" \
                -e "s!##ACK_LABEL##!${Ack_Label}!g" \
                -e "s!##ACK_PARAMETER##!${parameter_arg}!g" \
                -e "s!##ACK##!!g" \
                "${build_menu_template}" >> ${build_menu_destination}

            if [ $? -ne 0 ]; then
                aborting "sed build_menu_template '${build_menu_destination}' failed"
            fi

            if [ ${Debug} -gt 0 ]; then
                echo
                cat ${build_menu_destination}
                echo
            fi

        else
            aborting "'${build_menu_template}' file not readable"
        fi

    done

    unset -v build_menu_template build_menu_destination

    local cwd

    cwd="${PWD}"

    debugValue cwd ${debug_level}

    ackMediaBuildMd5sum "${build_dir}"

    local release_publisher=$(logname)
    debugValue release_publisher ${debug_level}

    local release_preparer=${Install_Server}
    debugValue release_preparer ${debug_level}

    local release_volume_id=${Ack_Label}-${build_distribution}-${build_version}-${build_architecture}-${release_iso_rev}
    debugValue release_volume_id ${debug_level}

    local release_volume_set_id
    if [ ${#build_platform} -gt 0 ]; then
        release_volume_set_id="${build_platform}"
    else
        release_volume_set_id="${release_iso_rev}"
    fi
    debugValue release_volume_set_id ${debug_level}

    printf "[%s] %sing %s ...\n\n" "${build_name}" "${build_action}" "$(basename ${release_iso})"

    printf "[%s] volume id %s, set $s\n\n" "${build_name}" "${release_volume_id}" "${release_volume_set_id}"

    cd "${build_dir}"

    ${genisoimage} \
        -appid $(basename ${release_iso}) -V "${release_volume_id}" -volset "${release_volume_set_id}" \
        -publisher "${release_publisher}" \
        -preparer "${release_preparer}" \
        -J -joliet-long -input-charset utf-8 -r -v -T \
        -untranslated-filenames -o ${release_iso} \
        -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 \
        -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
        ${build_dir}


    if [ $? -ne 0 ] || [ ! -s ${release_iso} ]; then
        aborting "${genisoimage} ${release_iso} failed"
    fi

    printf "\n"

    cd "$cwd"

    ackMediaBuildMd5sum "${build_dir}"

    ${implantisomd5} ${release_iso}
    if [ $? -ne 0 ]; then
        aborting "${implantisomd5} ${release_iso} failed"
    fi

    ${isohybrid} ${release_iso}
    if [ $? -ne 0 ]; then
        aborting "${isohybrid} ${release_iso} failed"
    fi
    printf "\n"

    ${isoinfo} -d -J -i ${release_iso}
    if [ $? -ne 0 ]; then
        aborting "${isoinfo} -i ${release_iso} -d -J failed"
    fi
    printf "\n"

    local release_iso_md5sum=${release_iso}.md5sum
    printf "[%s] %sing %s ...\n\n" "$build_name" "$build_action" "$(basename ${release_iso_md5sum})"

    cd "$(dirname ${release_iso})"

    md5sum "$(basename ${release_iso})" > "${release_iso_md5sum}"

    if [ -e "${release_iso_short}" ]; then
        rm -f "${release_iso_short}"
    fi

    ln -s "${release_iso}" "${release_iso_short}"

    cd "$cwd"

    printf "%s ... finished\n\n" "${release_iso}"

    # end function logic

    debugFunction $@
}

function ackMediaBuildMd5sum() {
    debugFunction $@

    # begin function logic

    local debug_level=5

    local md5sum_dir="$1"
    debugValue md5sum_dir ${debug_level}

    if [ ${#md5sum_dir} -eq 0 ]; then
        aborting "${FUNCNAME} requires an argument" 3
    fi

    if [ ! -d "${md5sum_dir}" ] || [ ! -r "${md5sum_dir}" ]; then
        aborting "${FUNCNAME} '${md5sum_dir}' directory not readable" 3
    fi

    local md5sum=$(type -P md5sum)
    if [ ${#md5sum} -eq 0 ] || [ ! -x "${md5sum}" ]; then
        aborting "md5sum executable not found" 3
    fi
    debugValue md5sum ${debug_level}

    local cwd="${PWD}"

    local subdir subdir_md5sum

    for subdir in $(find "${md5sum_dir}/" -type d 2> /dev/null | sort -r); do
        subdir=${subdir//\/\//\/}
        debugValue subdir ${debug_level}

        if [ "${subdir}" == "" ] || [ "${subdir}" == "/" ]; then
            aborting "${FUNCNAME} subdir is empty"
        fi

        cd "${subdir}"

        if [ $? -ne 0 ]; then
            aborting "failed to cd '${subdir}'"
        fi

        local subdir_md5sum=$(basename ${subdir}).md5sum
        debugValue subdir_md5sum ${debug_level}

        printf "[%s] %sing %s ...\n\n" "${build_name}" "${build_action}" "${subdir_md5sum}"

        find . -type f | xargs -r ${md5sum} \
            | egrep -ve "\.md5sum$|\/boot.cat$|\/efiboot.img$|\/grub.cfg$|\/isolinux.bin$|\/isolinux.cfg$|\/BOOT$|\/TRANS.TBL$" \
            | sort -k 2 > ${subdir_md5sum}

        done

        cd "${md5sum_dir}"

        find "." -type f | xargs -r ${md5sum} \
            | egrep -ve "\/boot.cat$|\/efiboot.img$|\/grub.cfg$|\/isolinux.bin$|\/isolinux.cfg$|\/BOOT$|\/TRANS.TBL$" \
            | sort -k 2 > ${md5sum_dir}/${Ack_Label}-image.md5sum

        cd "$cwd"

    # end function logic

    debugFunction $@
}

function ackMediaExtract() {
    debugFunction $@

    # begin function logic

    local debug_level=6

    local iso="$1"

    local iso_basename iso_dirname

    if [ -r "${iso}" ]; then
        iso=$(realpath "${iso}")
        iso_basename="$(basename "${iso}")"
        iso_dirname="$(dirname "${iso}")"
    else
        iso="${Distribution_Dir}/${iso}"
        if [ -r "${iso}" ]; then
            iso=$(realpath "${iso}")
            iso_basename="$(basename "${iso}")"
            iso_dirname="$(dirname "${iso}")"
        else
            usage "${iso} file not found readable"
        fi
    fi

    debugValue iso ${debug_level}
    debugValue iso_basename ${debug_level}
    debugValue iso_dirname ${debug_level}

    debugValue Distribution_Dir ${debug_level}

    if [ ${#iso} -eq 0 ] || [ ! -r "${iso}" ]; then
        usage "must supply a valid iso filename to extract"
    fi

    local bsdtar=$(which bsdtar 2> /dev/null)
    if [ ! -x "$bsdtar" ]; then
        aborting "bsdtar executable not found" 3
    fi
    debugValue bsdtar ${debug_level}

    local media_uri=$(ackURI "${iso}" iso)
    debugValue media_uri $debug_level

    if [ "${media_uri}" == "/" ] || [ "${media_uri}" == "" ]; then
        printf "\nERROR media_uri is wrong\n\n"
    fi

    local extract_dir="${Distribution_Dir}/${media_uri}"

    if [ ! -d "${extract_dir}" ]; then
        mkdir -p "${extract_dir}"
        if [ $? -ne 0 ]; then
            aborting "failed to mkdir ${extract_dir}"
        fi
    fi
    extract_dir=$(realpath "${extract_dir}")

    debugValue extract_dir ${debug_level}

    cd "${extract_dir}"

    local media_files=$(ls -1 2>&1)

    if [ ${#media_files} -gt 0 ]; then
        ls -1
        aborting "${extract_dir} already has files in it"
    else
        echo
        echo "+ extracting ${iso} to ${extract_dir}"
        echo
    fi

    $bsdtar xvf "${iso}"

    # end function logic

    debugFunction $@
}

# TODO; finish this ...
function ackMediaFlash() {
    debugFunction $@

    # begin function logic

    local flash_dev="$1"
    local flash_iso="$2"

    return

    if [ "$flash_dev" == "/dev/" ]; then
        Aborting "usb flash device not found" 3
    fi
    if [ ! -b "$flash_dev" ]; then
        Aborting "can't flash $flash_iso; $flash_dev is not a block device!" 3
    fi
    debugValue FLASH 2

    dd if=${ISO_FILE} of=${FLASH} bs=4096

    # end function logic

    debugFunction $@
}

function ackMediaMount() {
    debugFunction $@

    # begin function logic

    local debug_level=6

    local mount_arg="$1"
    debugValue mount_arg $debug_level

    local mount
    local mounts=()
    if [ -d "$mount_arg" ]; then
        debugValue mount_arg $debug_level dir
        while read mount; do
            mounts+=("$mount")
        done <<< "$(find "${mount_arg}/" -maxdepth 1 -type f)"
        unset mount
    else
        debugValue mount_arg $debug_level file
        mounts+=("$mount_arg")
    fi

    local mount
    local -i mount_count=0
    for mount in ${mounts[@]}; do
        debugValue mount $debug_level

        local mount_basename=$(basename $mount)
        debugValue mount_basename $debug_level

        if [ -a "$mount" ]; then
            # if it's a real file then only seriously consider ISOs
            mount_readlink=$(readlink -e $mount)
            debugValue mount_readlink $debug_level "found"

            isoinfo -i "$mount_readlink" 2> /dev/null
            if [ $? -ne 0 ]; then
                debug "'$mount_readlink' is not an ISO" $debug_level
                continue
            fi

            mount=$mount_readlink
        else
            aborting "'$mount' mount file not found"
        fi

        local mount_dirname=$(dirname $mount)
        debugValue mount_dirname $debug_level

        local media_uri=$(ackURI "$mount" iso)
        debugValue media_uri $debug_level

        if [ "$media_uri" == "/" ] || [ "$media_uri" == "" ]; then
            printf "\nERROR media_uri is wrong\n\n"
            continue
        fi

        local mount_dir=${mount_dirname}${media_uri}
        mount_dir="${mount_dir%"${mount_dir##*[!/]}"}" # trim trailing slashes

        mount | grep "on ${mount_dir} " &> /dev/null
        if [ $? -eq 1 ]; then
            # not mounted
            local mounted=1
        else
            # mounted, or busy (etc)
            local mounted=0
        fi

        debugValue mount_dir $debug_level $mounted

        if [ $mounted -eq 1 ]; then

            if [ ! -d "$mount_dir" ]; then
                if [ -a "$mount_dir" ]; then
                    debugValue mount_dir $debug_level "not a directory, error"
                    aborting "'$directory' is not a directory"
                else
                    debugValue mount_dir $debug_level "mkdir"
                    mkdir -p "$mount_dir" &> /dev/null
                    if [ $? -ne 0 ]; then
                        aborting "mount_dir mkdir $mount_dir directory failed"
                    fi
                fi

            else
                debugValue mount_dir $debug_level "found"
            fi

            if [ -d "${mount_dir}" ]; then
                mount -o loop $mount $mount_dir &> /dev/null
                if [ $? -eq 0 ]; then
                    ((++mount_count))
                    printf "%s -> %s ... mounted\n" "$mount_basename" "$mount_dir"
                else
                    aborting "'mount -o loop '$mount' '$mount_dir'' failed"
                fi
            else
                aborting "'$mount_dir' directory not found"
            fi

        else
            printf "%s -> %s ... already mounted\n" "$mount_basename" "$mount_dir"
        fi

    done

    # end function logic

    debugFunction $@
}

function ackMediaUnmount() {
    debugFunction $@

    # begin function logic

    local debug_level=33

    local unmount_arg="$1"
    debugValue unmount_arg $debug_level

    local unmount
    local unmounts=()
    if [ -d "$unmount_arg" ]; then
        debugValue unmount_arg $debug_level dir
        while read unmount; do
            unmounts+=("$unmount")
        done <<< "$(find "${unmount_arg}/" -maxdepth 1 -type f)"
        unset unmount
    else
        debugValue unmount_arg $debug_level file
        unmounts+=("$unmount_arg")
    fi

    local unmount
    local -i unmount_count=0
    for unmount in ${unmounts[@]}; do
        local unmount=$(realpath -e $unmount)
        local unmount_basename=$(basename $unmount)
        debugValue unmount $debug_level "$unmount_basename"
        local unmount_dir=$(mount | grep ^$unmount | awk '{print $3}')
        debugValue unmount_dir $debug_level

        if [ "$unmount_dir" != "" ]; then
            umount "$unmount_dir" &> /dev/null
            local return_code=$?
            if [ $return_code -ne 0 ]; then
                aborting "'umount $unmount_dir' failed ($return_code)" 4
            else
                ((++unomunt_count))
                printf "%s -> %s ... unmounted\n" "$unmount_basename" "$unmount_dir"
            fi

        fi
    done

    # end function logic

    debugFunction $@
}

function ackMediaVirt() {
    debugFunction $@

    # begin function logic

    local debug_level=10

    local virt_arg="$1"

    debugValue virt_arg $debug_level

    virt_boot=${virt_arg%%,*}
    debugValue virt_boot $debug_level

    local -l virt_mode="$2"
    if [ "$virt_mode" == "" ]; then
        virt_mode=${virt_arg##*,}
        if [ "${virt_mode}" != "bios" ] && [ "${virt_mode}" != "uefi" ]; then
            virt_mode=""
        fi
    fi

    if [ "$virt_mode" == "" ]; then
        virt_mode="bios"
    fi
    debugValue virt_mode $debug_level

    local virsh=$(which virsh 2> /dev/null)
    if [ ! -x "$virsh" ]; then
        aborting "virsh executable not found" 3
    fi
    debugValue virsh $debug_level

    local virt_install=$(which virt-install 2> /dev/null)
    if [ ! -x "$virt_install" ]; then
        aborting "virt-install executable not found" 3
    fi
    debugValue virt_install $debug_level

    local virt_basename=$(basename ${virt_boot})
    debugValue virt_basename $debug_level

    virt_name=${virt_basename}-${virt_mode}
    debugValue virt_name $debug_value $debug_level

    local virt_dir=${VM_Dir}/${virt_basename}
    debugValue virt_dir $debug_level

    mkdir -p "${virt_dir}" &> /dev/null

    local virt_disk=${virt_dir}/${virt_name}.qcow2 # qcow2
    debugValue virt_disk $debug_level

    ${virsh} domstate ${virt_name} &> /dev/null
    if [ $? -eq 0 ]; then
        # domain already exists
        local virt_state=$(${virsh} domstate ${virt_name})
        echo "virt '${virt_name}' is ${virt_state}"
        echo
        if [ "$virt_state" == "running" ]; then
            $virsh destroy "${virt_name}"
        fi
        if [ "${virt_mode}" == "uefi" ]; then
            $virsh undefine --nvram "${virt_name}"
        else
            $virsh undefine "${virt_name}"
        fi
    fi

    if [ -r "${virt_disk}" ]; then
        rm -f "${virt_disk}"
    fi

    # domain does not exist (or was undefined)

    if [ ! -r "${virt_boot}" ] || [ -d "${virt_boot}" ]; then
        if [ -r "${Media_Dir}/${virt_boot}" ] && [ ! -d "${Media_Dir}/${virt_boot}" ]; then
            virt_boot="${Media_Dir}/${virt_boot}"
        else
            if [ -r "${Build_Dir}/${virt_boot}" ] && [ ! -d "${Build_Dir}/${virt_boot}" ]; then
                virt_boot="${Build_Dir}/${virt_boot}"
            else
                if [ -r "${Distribution_Dir}/${virt_boot}" ] && [ ! -d "${Distribution_Dir}/${virt_boot}" ]; then
                    virt_boot="${Distribution_Dir}/${virt_boot}"
                else
                    if [ -r "${Release_Dir}/${virt_boot}" ] && [ ! -d "${Release_Dir}/${virt_boot}" ]; then
                        virt_boot="${Release_Dir}/${virt_boot}"
                    else
                        if [ -r "${VM_Dir}/${virt_boot}" ] && [ ! -d "${VM_Dir}/${virt_boot}" ]; then
                            virt_boot="${VM_Dir}/${virt_boot}"
                        else
                            aborting "virt_boot '${virt_boot}' file not readable"
                        fi
                    fi
                fi
            fi
        fi
    fi

    # file is readable, so create the domain

    local virt_mac_address_prefix="52:54:00"

    # create a 'consistent' mac address based on the node name
    # otherwise dhcp leases will quickly run out during testing ...
    local virt_mac_address_suffix_1=$(echo "${virt_name}" | md5sum 2> /dev/null | cut -c 1-2)
    if [ "${#virt_mac_address_suffix_1}" -ne 2 ]; then
        aborting "virt_mac_address_suffix_1 length is not 2 ($virt_mac_address_suffix_1)"
    fi
    local virt_mac_address_suffix_2=$(echo "${virt_name}" | md5sum | cut -c 5-6)
    if [ "${#virt_mac_address_suffix_2}" -ne 2 ]; then
        aborting "virt_mac_address_suffix_2 length is not 2 ($virt_mac_address_suffix_2)"
    fi
    local virt_mac_address_suffix_3=$(echo "${virt_name}" | md5sum | cut -c 9-10)
    if [ "${#virt_mac_address_suffix_3}" -ne 2 ]; then
        aborting "virt_mac_address_suffix_3 length is not 2 ($virt_mac_address_suffix_3)"
    fi

    local virt_mac_address=$(echo "${virt_mac_address_prefix}:${virt_mac_address_suffix_1}:${virt_mac_address_suffix_2}:${virt_mac_address_suffix_3}" | awk '{print tolower($NF)}')
    if [ "${#virt_mac_address}" -ne 17 ]; then
        aborting "virt_mac_address length is not 17 ($virt_mac_address)"
    fi

    debugValue virt_mac_address $debug_level

    local virt_disk_size=8 # G
    debugValue virt_disk_size $debug_level

    let host_cpus=$(lscpu | grep "^CPU(s)" | awk '{print $NF}')
    debugValue host_cpus $debug_level

    if [ ${host_cpus} -ge 4 ]; then
        local virt_cpus=2
    else
        local virt_cpus=1
    fi
    debugValue virt_cpus $debug_level

    let host_ram=$(free | grep ^Mem: | awk '{print $2}')
    let host_ram=${host_ram}/1000/1000
    debugValue host_ram $debug_level

    if [ ${host_ram} -ge 8 ]; then
        local virt_ram=4096
    else
        local virt_ram=2048
    fi
    debugValue virt_ram $debug_level

    if [ "${Ack_Default_IP_Interface}" == "br0" ]; then
        local virt_network="bridge=${Ack_Default_IP_Interface}"
    else
        if [ "${Ack_Default_IP_Interface}" == "" ]; then
            local virt_network="eth0"
        else
            local virt_network="${Ack_Default_IP_Interface}"
        fi
    fi

    if [ "$virt_mac_address" != "" ]; then
        virt_network+=",mac=$virt_mac_address"
    fi

    debugValue virt_network $debug_level

    if [ "${virt_mode}" == "uefi" ]; then
        local virt_boot_options="${virt_mode},"
    else
        local virt_boot_options=""
    fi
    virt_boot_options+="hd,"
    virt_boot_options+="cdrom,"
    virt_boot_options+="useserial=on,"
    #virt_boot_options+="menu=on"

    # trim trailing commas
    while [ "${virt_boot_options:${#virt_boot_options}-1:1}" == "," ]; do 
        virt_boot_options=${virt_boot_options%,*}
    done

    debugValue virt_boot_options $debug_level

    # TODO: test this with various virt_basenames

    local virt_os=${virt_basename%%-*}

    printf "virt_os=${virt_os}\n\n"

    local virt_os_version=${virt_basename#*-}
    virt_os_version=${virt_os_version%%-*}
    debugValue virt_os_version $debug_level

    local virt_os_variant
    local osinfos=$(osinfo-query os | grep ^\ ${virt_os} | awk '{print $1}' | sort -uV)
    for osinfo in $osinfos; do
        virt_os_variant=${osinfo}
        if [ "${virt_os}${virt_os_version}" == "${osinfo}" ]; then
            break;
        fi
    done

    printf "virt_os_variant=${virt_os_variant}\n\n"

    local virt_install_args=""
    virt_install_args+=" --name ${virt_name}"
    virt_install_args+=" --boot ${virt_boot_options}"
    virt_install_args+=" --cdrom ${virt_boot}"
    virt_install_args+=" --console pty,target_type=virtio"
    virt_install_args+=" --cpus ${virt_cpus}"
    virt_install_args+=" --disk path=${virt_disk},device=disk,bus=virtio,size=${virt_disk_size},sparse=true,format=qcow2"
    virt_install_args+=" --network ${virt_network}"
    virt_install_args+=" --metadata name=${virt_name},title=${virt_name}"
    #if [ "${virt_mode}" != "uefi" ]; then
    #virt_install_args+=" --graphics none"
    #fi
    virt_install_args+=" --os-type=linux"
    if [ ${#virt_os_variant} -gt 0 ]; then
        virt_install_args+=" --os-variant $virt_os_variant"
    fi
    virt_install_args+=" --memory ${virt_ram}"
    virt_install_args+=" --serial pty"
    virt_install_args+=" --virt-type kvm"
    virt_install_args+=" --rng /dev/random"

    virt_install_args=${virt_install_args## } # trim leading spaces
    virt_install_args=${virt_install_args%% } # trim trailing spaces

    debugValue "virt_install_args" $((debug_level+1))

    ${virt_install} ${virt_install_args}

    # virt-viewer ${virt_basename} # works with --vnc

    # end function logic

    debugFunction $@
}

function usage() {
    debugFunction $@

    # begin function logic

    echo
    echo "usage: $0 <options>"
    echo
    echo "options:"
    echo
    echo "  -D | --debug [level]            = print debug messages (less than) [level]"
    echo
    echo "  -b | --build <iso>              = build ack install media from (distribution) <iso(s)> [DEFAULT=${Default_Distribution_Dir}]"
    # TODO add --flash flag
    echo "  -d | --domain <name>            = set build domain <name> [DEFAULT=${Default_Domain}]"
    echo "  -e | --extract <iso>            = extract iso to media distribution directory [DEFAULT=${Default_Distribution_Dir}]"
    echo "  -s | --server <name>            = set build (install) server <name> [DEFAULT=${Default_Install_Server}]"
    echo
    echo "  -v | --virt <iso>[,mode]        = create and boot an iso, using optional mode (bios or uefi), with virsh utilities [DEFAULT=none]"
    echo
    echo "  -m | --mount <iso>              = mount iso file(s) [DEFAULT=${Default_Distribution_Dir}]"
    echo "  -r | --remount <iso>            = remount iso file(s) [DEFAULT=${Default_Distribution_Dir}]"
    echo "  -u | --unmount <iso>            = unmount iso file(s) [DEFAULT=${Default_Distribution_Dir})"
    echo
    echo "  -p | --uri <iso>                = display the media URI path(s) [DEFAULT=${Default_Distribution_Dir})"
    echo
    if [ "$1" != "" ]; then
        echo "Note: $1"
        echo
    fi

    # end function logic

    debugFunction $@

    ackStop

    exit 1
}

# Validation Logic

# Options Logic

# expand upon the base Options function (careful, same named switches will be processed twice)

# for each command line argument, evaluate them case by case, process them, and shift to the next
ARGUMENTS=$#
for ((ARGUMENT=1; ARGUMENT <= $ARGUMENTS; ARGUMENT++)); do
    case "$1" in
        -D | --D | --debug | -debug)
            let Debug=$2
            if [ "${Debug}" != "" ] && [ ${Debug:0:1} == "-" ]; then
                let Debug=0
            fi
            if [ "${Debug}" == "" ]; then
                let Debug=0
            else
                let Debug=$2
                shift
            fi
            ;;
        -b | --build | -build)
            Build_Flag=0
            Build="$2"
            if [ "${Build}" != "" ] && [ ${Build:0:1} == "-" ]; then
                Build=""
            fi
            if [ "${Build}" == "" ]; then
                Build=""
            else
                declare Build=$2
                shift
            fi
            ;;
        -d | --domain | -domain)
            Domain_Flag=0
            Domain="$2"
            if [ "${Domain}" != "" ] && [ ${Domain:0:1} == "-" ]; then
                Domain=""
            fi
            if [ "${Domain}" == "" ]; then
                Domain=""
            else
                declare Domain=$2
                shift
            fi
            ;;
        -e | --extract | -extract)
            Extract_Flag=0
            Extract="$2"
            if [ "${Extract}" != "" ] && [ ${Extract:0:1} == "-" ]; then
                Extract=""
            fi
            if [ "${Extract}" == "" ]; then
                Extract=""
            else
                declare Extract=$2
                shift
            fi
            ;;
        -f | --force | -force)
            Force_Flag=0
            ;;
        -m | --mount | -mount)
            Mount_Flag=0
            Mount="$2"
            if [ "${Mount}" != "" ] && [ ${Mount:0:1} == "-" ]; then
                Mount=""
            fi
            if [ "${Mount}" == "" ]; then
                Mount=""
            else
                declare Mount=$2
                shift
            fi
            ;;
        -r | --remount | -remount | --rmount | -rmount)
            Remount_Flag=0
            Remount="$2"
            if [ "${Remount}" != "" ] && [ ${Remount:0:1} == "-" ]; then
                Remount=""
            fi
            if [ "${Remount}" == "" ]; then
                Remount=""
            else
                declare Remount=$2
                shift
            fi
            ;;
        -s | --server | -server | --install-server | -install-server)
            Install_Server_Flag=0
            Install_Server="$2"
            if [ "${Install_Server}" != "" ] && [ ${Install_Server:0:1} == "-" ]; then
                Install_Server=""
            fi
            if [ "${Install_Server}" == "" ]; then
                Install_Server=""
            else
                declare Install_Server=$2
                shift
            fi
            ;;
        -u | --unmount | -unmount | --umount | -umount)
            Unmount_Flag=0
            Unmount="$2"
            if [ "${Unmount}" != "" ] && [ ${Unmount:0:1} == "-" ]; then
                Unmount=""
            fi
            if [ "${Unmount}" == "" ]; then
                Unmount=""
            else
                declare Unmount=$2
                shift
            fi
            ;;
        -p | --uri | -uri)
            URI_Flag=0
            URI="$2"
            if [ "${URI}" != "" ] && [ ${URI:0:1} == "-" ]; then
                URI=""
            fi
            if [ "${URI}" == "" ]; then
                URI=""
            else
                declare URI=$2
                shift
            fi
            ;;
        -v | --virt | -virt | --vm | -vm)
            Virt_Flag=0
            Virt="$2"
            if [ "${Virt}" != "" ] && [ ${Virt:0:1} == "-" ]; then
                Virt=""
            fi
            if [ "${Virt}" == "" ]; then
                Virt=""
            else
                declare Virt=$2
                shift
            fi
            ;;
        -y | --yes | -yes)
            Yes_Flag=0
            ;;
    esac
    shift
done

# Main Logic

debugValue Debug 2
debugValue Build_Flag 20 "${Build}"
debugValue Domain_Flag 20 "${Domain}"
debugValue Force_Flag 20 "${Force}"
debugValue Install_Server_Flag 20 "${Install_Server}"
debugValue Mount_Flag 20 "${Mount}"
debugValue Remount_Flag 20 "${Remount}"
debugValue Unmount_Flag 20 "${Unmount}"
debugValue URI_Flag 20 "${URI}"
debugValue Virt_Flag 20 "${Virt}"

# meh .. one of these flags is required
if [ ${Build_Flag} -ne 0 ]; then
    if [ ${Mount_Flag} -ne 0 ]; then
        if [ ${Remount_Flag} -ne 0 ]; then
            if [ ${Unmount_Flag} -ne 0 ]; then
                if [ ${Extract_Flag} -ne 0 ]; then
                    if [ ${URI_Flag} -ne 0 ]; then
                        if [ ${Virt_Flag} -ne 0 ]; then
                            usage
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

debugValue Ack_Dir 12

if [ "${Media_Dir}" == "" ] || [ "${Media_Dir}" == "/" ]; then
    Media_Dir="${Default_Media_Dir}"
fi

if [ "${Media_Dir}" == "" ] || [ "${Media_Dir}" == "/" ] || [ ! -d "${Media_Dir}" ]; then
    aborting "Media_Dir directory not found"
fi
debugValue Media_Dir 12

if [ "${Build_Dir}" == "" ] || [ "${Build_Dir}" == "/" ]; then
    Build_Dir="${Default_Build_Dir}"
fi

if [ "${Build_Dir}" == "" ] || [ "${Build_Dir}" == "/" ] || [ ! -d "${Build_Dir}" ]; then
    mkdir -p "${Build_Dir}" &> /dev/null
    if [ $? -ne 0 ]; then
        aborting "Build_Dir mkdir -p '${Build_Dir}' failed"
    fi
fi
debugValue Build_Dir 12

if [ "${Distribution_Dir}" == "" ] || [ "${Distribution_Dir}" == "/" ]; then
    Distribution_Dir="${Default_Distribution_Dir}"
fi

if [ "${Distribution_Dir}" == "" ] || [ "${Distribution_Dir}" == "/" ] || [ ! -d "${Distribution_Dir}" ]; then
    mkdir -p "${Distribution_Dir}" &> /dev/null
    if [ $? -ne 0 ]; then
        aborting "Distribution_Dir mkdir -p '${Distribution_Dir}' failed"
    fi
fi
debugValue Distribution_Dir 12

if [ "${Release_Dir}" == "" ] || [ "${Release_Dir}" == "/" ]; then
    Release_Dir="${Default_Release_Dir}"
fi

if [ "${Release_Dir}" == "" ] || [ "${Release_Dir}" == "/" ] || [ ! -d "${Release_Dir}" ]; then
    mkdir -p "${Release_Dir}" &> /dev/null
    if [ $? -ne 0 ]; then
        aborting "Release_Dir mkdir -p '${Release_Dir}' failed"
    fi
fi
debugValue Release_Dir 12

if [ "${VM_Dir}" == "" ] || [ "${VM_Dir}" == "/" ]; then
    VM_Dir="${Default_VM_Dir}"
fi

if [ "${Virt_Dir}" != "" ] && [ "${Virt_Dir}" != "/" ] && [ ! -d "${Virt_Dir}" ]; then
    mkdir -p "${Virt_Dir}" &> /dev/null
    if [ $? -ne 0 ]; then
        aborting "VM_Dir mkdir -p '${VM_Dir}' failed"
    fi
fi
debugValue VM_Dir 12

if [ "${URI}" == "" ]; then
    URI=${Distribution_Dir}
fi
debugValue URI 20

if [ ${URI_Flag} -eq 0 ]; then
    ackURI "${URI}" iso
    ackStop
    exit # --uri by itself does nothing else
fi

if [ ${Extract_Flag} -eq 0 ]; then
    ackMediaExtract "${Extract}"
    ackStop
    exit # --uri by itself does nothing else
fi

if [ "${Virt}" == "" ]; then
    Virt=${Release_Dir}
else
    if [ "${Virt,,}" == "clean" ]; then

        for vm in $(virsh list --all 2> /dev/null | egrep -e 'iso-bios|iso-uefi' | awk '{print $2}'); do
            virsh destroy ${vm}
            if [[ "${vm}" =~ "uefi" ]]; then
                virsh undefine ${vm} --nvram
            else
                virsh undefine ${vm}
            fi
        done

        if [ -d "${VM_Dir}" ] && [ "${VM_Dir}" != "" ] && [ "${VM_Dir}" != "/" ]; then
            find "${VM_Dir}/" -name "${vm}.*" -exec rm {} +
            rmdir "${VM_Dir}/"* &> /dev/null # remove empty directories
        fi

        ackStop
        exit
    fi
fi

debugValue Virt 20

if [ ${Virt_Flag} -eq 0 ] && [ ${Build_Flag} -eq 1 ]; then
    ackMediaVirt "${Virt}"
    ackStop
    exit # --virt by itself does nothing else
fi

if [ "${Unmount}" == "" ]; then
    Unmount=${Distribution_Dir}
fi

if [ ${Unmount_Flag} -eq 0 ]; then
    ackMediaUnmount "${Unmount}"
fi

if [ "${Remount}" == "" ]; then
    Remount=${Distribution_Dir}
fi

if [ ${Remount_Flag} -eq 0 ]; then
    ackMediaUnmount "${Remount}"
    ackMediaMount "${Remount}"
fi

if [ "${Mount}" == "" ]; then
    Mount=${Distribution_Dir}
fi

if [ ${Mount_Flag} -eq 0 ]; then
    if [ "${Mount}" != "" ] && [ ! -r "${Mount}" ]; then
        Mount="${Distribution_Dir}/${Mount}"
    fi
    ackMediaMount "${Mount}"
fi

if [ ${Build_Flag} -eq 1 ]; then
    ackStop
    exit # if not building then exit here
fi

# build needs these variables

if [ "${Install_Server}" == "" ]; then
    if [ "${Default_Install_Server}" == "" ]; then
        if [ "${Domain}" == "" ]; then
            Install_Server="ack.localdomain"
        else
            Install_Server="ack.${Domain}"
        fi
    else
        if [ "${Domain}" == "" ]; then
            Install_Server="${Default_Install_Server}"
        else
            Install_Server="ack.${Domain}"
        fi
    fi
fi

debugValue Install_Server 12

# TODO: make this work via Ack.php; cli replaces localhost for cli, so for now ...
Client_Install_URL="https://${Install_Server}/client"
debugValue Client_Install_URL 12

if [ "${Domain}" == "" ]; then
    if [ "${Default_Domain}" == "" ]; then
        if [ "${Install_Server}" == "" ]; then
            Domain="localdomain"
        else
            Install_Server_Dots=$(echo "${Install_Server}" | grep -o \\. | wc -l)
            debugValue Install_Server 31 ${Install_Server_Dots}
            if [ ${Install_Server_Dots} -gt 1 ]; then
                Domain="$(echo ${Install_Server} | awk -F. '{for (i=2; i<NF; i++) printf $i "."; print $NF}')"
            else
                Domain="${Install_Server}"
            fi
        fi
    else
        if [ "${Install_Server}" == "" ]; then
            Domain="${Default_Domain}"
        else
            Install_Server_Dots=$(echo "${Install_Server}" | grep -o \\. | wc -l)
            debugValue Install_Server 31 ${Install_Server_Dots}
            if [ ${Install_Server_Dots} -gt 1 ]; then
                Domain="$(echo ${Install_Server} | awk -F. '{for (i=2; i<NF; i++) printf $i "."; print $NF}')"
            else
                Domain=${Install_Server}
            fi
        fi
    fi
fi

debugValue Domain 12

if [ "${Build}" == "" ]; then
    Build=${Distribution_Dir}
fi

if [ ${Build_Flag} -eq 0 ]; then
    ackMediaBuild "${Build}"
    #ackMediaBuild "${Build}" recovery
fi
