#!/usr/bin/env php
<?php

/**
 * aNAcONDA kICKSTART (ack) [component]
 *
 * Copyright (C) 2015 Joseph Tingiris
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @author      Current authors: Joseph Tingiris <joseph.tingiris@gmail.com>
 *                               (next author)
 *
 *              Original author: Joseph Tingiris <joseph.tingiris@gmail.com>
 *
 * @license     https://opensource.org/licenses/GPL-3.0
 *
 * @version     0.2.0
 */

namespace josephtingiris\Ack;

/*
 *
 * nothing should preceed namespace, except declarations;
 * see http://php.net/manual/en/language.namespaces.definition.php
 *
 * PSR-0: Autoloading Standard (Deprecated, DO NOT USE)
 * see http://www.php-fig.org/psr/psr-0/
 * see http://www.php-fig.org/psr/psr-4/
 *
 * PSR-1: Basic Coding Standard
 * see http://www.php-fig.org/psr/psr-1/
 *
 * PSR-2: Coding Style Guide
 * see http://www.php-fig.org/psr/psr-2/
 *
 * PSR-3: Logger Interface
 * see http://www.php-fig.org/psr/psr-3/
 * use \Monolog\Logger as Logger; # psr-3
 * use \Monolog\Handler\StreamHandler as StreamHandler; # psr-3
 *
 * PSR-4: Autoloader
 * see http://www.php-fig.org/psr/psr-4/
 * require composer autoload.php; ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
 *
 */

# begin composer psr-4 autoloader

$Autoload_Php="autoload.php";
$Autoload_Enabled=false;
$Autoload_Paths=array(dirname(__FILE__), getcwd());
foreach ($Autoload_Paths as $Autoload_Path) {
    if ($Autoload_Enabled) break;
    while(strlen($Autoload_Path) > 0) {
        if ($Autoload_Path == ".") $Autoload_Path=getcwd();
        if ($Autoload_Path == "/") break;
        if (is_readable($Autoload_Path . "/vendor/" . $Autoload_Php) && !is_dir($Autoload_Path . "/vendor/" . $Autoload_Php)) {
            $Autoload_Enabled=true;
            require_once($Autoload_Path . "/vendor/" . $Autoload_Php);
            break;
        } else {
            $Autoload_Path=dirname($Autoload_Path);
        }
    }
}
if (!$Autoload_Enabled) { echo "$Autoload_Php file not found\n"; exit(1); }
unset($Autoload_Php, $Autoload_Path);

# end composer psr-4 autoloader

/*
 *
 * vendor class depdendent psr-0 & psr-4 root/unnamed namespace aliases MAY be used
 * however, missing namespace aliases SHOULD NOT cause PHP Fatal (class not found) errors
 *
 */

/*
 *
 * functions
 *
 */

/*
 *
 * main
 *
 */

# Global (debug)

if (!empty($_GET) && is_array($_GET)) {
    $_GET_lower = array_change_key_case($_GET, CASE_LOWER);
} else {
    $_GET_lower=array();
}

if (isset($_GET_lower['debug'])) {
    $DEBUG=(int)$_GET_lower['debug'];
}

if (empty($Default_Timezone)) {
    $Default_Timezone="America/New_York";
}
date_default_timezone_set($Default_Timezone);

$Ack = new \josephtingiris\Ack;
$Ack_Sub = new \josephtingiris\Ack\Sub;

$Ack_Test_Url=null;

if (!empty($argv[1])) {
    $Ack->debugValue("argv[1]",2,$argv[1]);
    if (filter_var($argv[1],FILTER_VALIDATE_URL)) {
        $Test_Parse_Url=parse_url($argv[1]);
    } else {
        if (filter_var($argv[1],FILTER_VALIDATE_DOMAIN,FILTER_FLAG_HOSTNAME)) {
            $Test_Parse_Url=array("host" => $argv[1]);
        }
    }
}

if (empty($Test_Parse_Url["scheme"])) {
    $Ack_Test_Url="http://";
} else {
    $Ack_Test_Url=$Test_Parse_Url["scheme"] . "://";
}

if (empty($Test_Parse_Url["host"])) {
    if (!empty($Ack_Install_Server)) {
        $Ack_Test_Url.=$Ack_Install_Server;
    } else {
        $Ack_Test_Url.="localhost";
    }
} else {
    $Ack_Test_Url.=$Test_Parse_Url["host"];
}

if (!empty($Test_Parse_Url["port"])) {
    $Ack_Test_Url.=":" . $Test_Parse_Url["port"];
}

if (!empty($Test_Parse_Url["path"])) {
    $Ack_Test_Url.=$Test_Parse_Url["path"];
} else {
    $Ack_Test_Url.="/";
}

if (!empty($Test_Parse_Url["query"])) {
    $Ack_Test_Url.="?" . $Test_Parse_Url["query"];
} else {
    $Ack_Test_Url.="?install=";
}

if (filter_var($Ack_Test_Url,FILTER_VALIDATE_URL)) {
    $Ack->debugValue("Ack_Test_Url",3);

    $Ack->debugValue("Ack_Client_Install_Uri",5);

    $curl_init=curl_init();

    curl_setopt($curl_init,CURLOPT_URL,$Ack_Test_Url);
    curl_setopt($curl_init,CURLOPT_FOLLOWLOCATION,true);
    curl_setopt($curl_init,CURLOPT_SSL_VERIFYPEER,false);

    $curl_headers=array();
    array_push($curl_headers,"X-PROVISIONING-IP-0: " . $Ack->Default_IP_Interface . " " . $Ack->Default_IP_Address);

    $uname=null; $Ack_Sub->subExec("uname -m",$uname); $uname=trim($uname);
    array_push($curl_headers,"X-ANACONDA-ARCHITECTURE: $uname");

    # /sys/class/dmi/id/product_serial
    $serial_number=null; $serial_number=basename($Ack->Zero); $serial_number=trim($serial_number);
    array_push($curl_headers,"X-SYSTEM-SERIAL-NUMBER: $serial_number");

    // product really comes from dracut via
    // buildstamp=/run/initramfs/.buildstamp
    //     product=$(config_get Main Product < $buildstamp)
    //     parse-anaconda-options.sh
    // which is typically inside of squashfs.img or product.img; rootfs.img
    // e.g. [root@dt .../ack/media/build]# cat /mnt/rootfs/.buildstamp
    // [Main]
    // Product=CentOS
    // Version=7
    // BugURL=http://bugs.centos.org
    // IsFinal=True
    // UUID=201503272225.x86_64
    // [Compose]
    // Lorax=19.6.51-1
    //

    // RHEL 6 & older
    //
    // zcat initramfs-2.6.32-431.el6.x86_64.img | cpio -id
    //
    // RHEL 7 & newer
    //
    // /usr/lib/dracut/skipcpio initrd.img | gunzip -c | cpio -i -d
    // /usr/lib/dracut/skipcpio initrd.img | xz -dc | cpio -i -d # note this extracts to pwd
    // /usr/lib/dracut/skipcpio initrd.img | xz -dc | cpio -i -d .buildstamp # note this extracts to pwd

    $system_release=null; ; $uname=trim($uname);
    array_push($curl_headers,"X-ANACONDA-ARCHITECTURE: $uname");

    curl_setopt($curl_init,CURLOPT_HTTPHEADER,$curl_headers);

    $curl_exec = curl_exec($curl_init);
    $curl_status = curl_getinfo($curl_init,CURLINFO_HTTP_CODE);

} else {
    printf("'%s' failed validation\n",$Ack_Test_Url);
}

exit();
?>
